import os
from aiogram import types
from aiogram.types import (
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    InputFile,
)
from main import bot, dp
from storage import RamStorage
from utils import save_new_user, select_molecule

@dp.message_handler(commands=["start"])
async def send_welcome(message: types.Message):
    """
    This handler will be called when user sends `/start` or `/help` command
    """
    text = """
    –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —á–∞—Ç-–±–æ—Ç –¥–ª—è –≤—ã–±–æ—Ä–∞ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞!\n
    –ü–æ–º–Ω–∏—Ç–µ - –≤—Å—ë, —á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤ –±–æ–π—Ü–æ–≤—Å–∫–æ–º –∫–ª—É–±–µ, –æ—Å—Ç–∞—ë—Ç—Å—è –≤ –±–æ–π—Ü–æ–≤—Å–∫–æ–º –∫–ª—É–±–µ üòé

    """
    save_new_user(message)
    model_button = InlineKeyboardButton('–ü–æ–µ—Ö–∞–ª–∏!', callback_data="select_first")
    markup = InlineKeyboardMarkup(inline_keyboard=[[model_button]])

    await bot.send_message(
        chat_id=message.chat.id,
        text=text,
        reply_markup=markup,
        parse_mode=types.ParseMode.MARKDOWN,
    )


@dp.callback_query_handler(lambda c: c.data == "select_first")
async def process_callback_select_first(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)

    select_sema_button = InlineKeyboardButton('–°–µ–º–∞–≥–ª—É—Ç–∏–¥', callback_data="select_first_button_sema")
    select_natural_button = InlineKeyboardButton('–ù–∞—Ç—É—Ä–∞–ª—å–Ω—ã–π –∞–≥–æ–Ω–∏—Å—Ç', callback_data="select_first_button_natural")
    select_chimera_button = InlineKeyboardButton('–•–∏–º–µ—Ä—É üôÉ', callback_data="select_first_button_chimera")
    markup = InlineKeyboardMarkup(
        inline_keyboard=[
            [select_sema_button],
            [select_natural_button],
            [select_chimera_button]
        ]
    )
    text = "–ß—Ç–æ –≤–æ–∑—å–º—ë–º –∑–∞ –æ—Å–Ω–æ–≤—É?"

    await bot.edit_message_text(
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id,
        text=text,
        reply_markup=markup,
        parse_mode=types.ParseMode.MARKDOWN,
    )

@dp.callback_query_handler(lambda query: query.data.startswith("select_first_button_"))
async def process_callback_select_model_(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    selected_base = callback_query.data.replace("select_first_button_", "")

    RamStorage.users_data[callback_query.message.chat.id]['selected_base'] = selected_base

    select_3_button = InlineKeyboardButton('3', callback_data="select_second_button_3")
    select_5_button = InlineKeyboardButton('5', callback_data="select_second_button_5")
    select_10_button = InlineKeyboardButton('10', callback_data="select_second_button_10")
    back = InlineKeyboardButton('‚Ü©Ô∏è –ù–∞–∑–∞–¥', callback_data="select_first")
    markup = InlineKeyboardMarkup(
        inline_keyboard=[
            [select_3_button],
            [select_5_button],
            [select_10_button],
            [back]
        ]
    )
    text = '–°–∫–æ–ª—å–∫–æ –º—É—Ç–∞—Ü–∏–π –º–æ–∂–Ω–æ –≤–Ω–µ—Å—Ç–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ?'

    await bot.edit_message_text(
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id,
        text=text,
        reply_markup=markup,
        parse_mode=types.ParseMode.MARKDOWN,
    )

@dp.callback_query_handler(lambda query: query.data.startswith("select_second_button_"))
async def process_callback_select_model_(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    num_mutations = callback_query.data.replace("select_second_button_", "")

    RamStorage.users_data[callback_query.message.chat.id]['num_mutations'] = num_mutations

    select_ecoli_button = InlineKeyboardButton('ü¶†', callback_data="select_third_button_ecoli")
    select_chem_button = InlineKeyboardButton('üß™', callback_data="select_third_button_chem")
    back = InlineKeyboardButton('‚Ü©Ô∏è –ù–∞–∑–∞–¥', callback_data="select_first_button_")
    markup = InlineKeyboardMarkup(
        inline_keyboard=[
            [select_ecoli_button],
            [select_chem_button],
            [back]
        ]
    )
    text = '–•–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —Å –ø–æ–º–æ—â—å—é E.coli –∏–ª–∏ –æ–±–æ–π–¥—ë–º—Å—è —Ö–∏–º–∏—á–µ—Å–∫–∏–º —Å–∏–Ω—Ç–µ–∑–æ–º?'

    await bot.edit_message_text(
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id,
        text=text,
        reply_markup=markup,
        parse_mode=types.ParseMode.MARKDOWN,
    )


@dp.callback_query_handler(lambda query: query.data.startswith("select_third_button_"))
async def process_callback_select_model_(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    synt_method = callback_query.data.replace("select_third_button_", "")

    RamStorage.users_data[callback_query.message.chat.id]['synt_method'] = synt_method

    select_mild_button = InlineKeyboardButton('–£–º–µ—Ä–µ–Ω–Ω–æ', callback_data="select_fourth_button_mild")
    select_strong_button = InlineKeyboardButton('–ß–µ–º –Ω–∏–∂–µ KD, —Ç–µ–º –ª—É—á—à–µüí™', callback_data="select_fourth_button_strong")
    back = InlineKeyboardButton('‚Ü©Ô∏è –ù–∞–∑–∞–¥', callback_data="select_second_button_")
    markup = InlineKeyboardMarkup(
        inline_keyboard=[
            [select_mild_button],
            [select_strong_button],
            [back]
        ]
    )
    text = '–ö–∞–∫ –±—É–¥–µ–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Ü–µ–ª–µ–≤—ã–µ —Ä–µ—Ü–µ–ø—Ç–æ—Ä—ã?'

    await bot.edit_message_text(
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id,
        text=text,
        reply_markup=markup,
        parse_mode=types.ParseMode.MARKDOWN,
    )


@dp.callback_query_handler(lambda query: query.data.startswith("select_fourth_button_"))
async def process_callback_select_model_(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    activation_method = callback_query.data.replace("select_fourth_button_", "")

    RamStorage.users_data[callback_query.message.chat.id]['activation_method'] = activation_method

    button_start_again = InlineKeyboardButton('–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞', callback_data="select_first")
    markup = InlineKeyboardMarkup(
        inline_keyboard=[
            [button_start_again],
        ]
    )

    png_mol_path = select_molecule(callback_query.message)
    if png_mol_path is not None:
        text = '–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–æ—Ç –∏ –≤–∞—à –∫–∞–Ω–¥–∏–¥–∞—Ç –≤ –õ–° üòé'
        photo = InputFile(os.path.join('images', png_mol_path))
        await bot.send_photo(
            callback_query.message.from_user.id,
            photo,
            caption=text,
            reply_markup=markup,
            has_spoiler=False,
            parse_mode=types.ParseMode.MARKDOWN,
        )
    else:
        text = '–¢–∞–∫—É—é –º–æ–ª–µ–∫—É–ª—É –Ω–µ —Å–∏–Ω—Ç–µ–∑–∏—Ä–æ–≤–∞—Ç—å, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ üò¢'
        await bot.send_message(
            chat_id=callback_query.message.from_user.id,
            text=text,
            reply_markup=markup,
            parse_mode=types.ParseMode.MARKDOWN,
        )


@dp.message_handler(commands=["help"])
async def send_help(message: types.Message):
    """
    This handler will be called when user sends `/start` or `/help` command
    """
    save_new_user(message)
    await bot.send_message(
        chat_id=message.chat.id,
        text='—â—ë–ª–∫–Ω–∏—Ç–µ /start',
        parse_mode=types.ParseMode.MARKDOWN,
    )